pragma ton-solidity >= 0.42.0;
pragma AbiHeader expire;
pragma AbiHeader time;
pragma AbiHeader pubkey;

import "./IRootTokenContract.sol";

contract NewContract {
    // Event is an external message generated by the contract functions.
    // Here we will emit this external outbound message
    // every time we have changed the hello text.
    // event TextUpdated(string text, uint32 time);

    // Instance variable storing some user data.
    string helloText;

    bytes nameBytes;
    bytes symbolBytes;

    string nameString;
    string symbolString;

    bytes nameA;
    bytes symbolA;

    bytes nameB;
    bytes symbolB;

    // Instance variable storing the time of `constructor` call or `touch` function call.
    // uint32 textUpdateTime;

    // Constructor sets instance variables.
    // All contracts need to call `tvm.accept()` for deploying.
    constructor(string nameStr) public {    //, string symbolStr, bytes nameBt, bytes symbolBt
        tvm.accept();
        // helloText = text;
        // nameBytes = nameBt;
        // symbolBytes = symbolBt;
        nameString = nameStr;
        // symbolString = symbolStr;
        // textUpdateTime = now;
    }

    // Function `setHelloText` updates instance variables
    // `helloText` and `textUpdateTime`.
    function setHelloText(string text) external returns (string oldText) {
        require(msg.pubkey() == tvm.pubkey(), 100);
        tvm.accept();
        string saveText = helloText;
        helloText = text;
        // textUpdateTime = now;
        // emit TextUpdated(helloText, textUpdateTime);
        return saveText;
    }

    function addSymbol(bytes text) external returns (bytes text1) {
        require(msg.pubkey() == tvm.pubkey(), 100);
        tvm.accept();

        symbolString.append(text);
        symbolBytes = bytes(symbolString);

        return symbolBytes;
    } 

	function complexSymbol(address rootA, address rootB) public view returns (bytes symbol) {

        IRootTokenContract(rootA).getDetails{value: 1, flag: 64, callback: NewContract.setDetails}();
        IRootTokenContract(rootB).getDetails{value: 1, flag: 64, callback: NewContract.setDetails}();
        // IRootTokenContract(rootB).getDetails{value: 0, flag: 64}(0);

        // bytes symbolA = IRootTokenContract(rootA).getSymbol{value: 0, flag: 64}();
        // bytes symbolB = IRootTokenContract(rootB).getSymbol{value: 0, flag: 64}();
        
        // string symbolAString = string(symbolA);
        // string symbolBString = string(symbolB);

        // symbolAString.append(symbolBString);

        // bytes symbolRes = bytes(symbolAString);

        // return symbolRes;
	}

	function setDetails(IRootTokenContract.IRootTokenContractDetails Details) external {

        symbolA  = Details.symbol;
        nameA    = Details.name;

        symbolB  = Details.symbol;
        nameB    = Details.name;
		// save parameter er in state variable 'exchangeRate'.
		// exchangeRate = er;
	}

    function getNameBytes() public view returns (bytes text) {
        return nameBytes;
    }

    function getSymbolBytes() public view returns (bytes text) {
        return symbolBytes;
    }

    function getNameString() public view returns (string text) {
        return nameString;
    }

    function getSymbolString() public view returns (string text) {
        return symbolString;
    }            

    // Function returns value of instance variable `helloText`.
    // This function can be called only on local TVM.
    function getHelloText() public view returns (string text) {
        return helloText;
    }


    // function IRootTokenContractDetails(
    //         name,
    //         symbol,
    //         decimals,
    //         wallet_code,
    //         root_public_key,
    //         root_owner_address,
    //         total_supply
    //     );
    // Function returns value of instance variable `textUpdateTime`.
    // This function can be called only on local TVM.
    // function getTextUpdateTime() public view returns (uint32 time) {
    //     return textUpdateTime;
    // }
}
